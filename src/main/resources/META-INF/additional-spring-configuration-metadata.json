{
  "properties": [
    {
      "name": "async.framework.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether the async processing framework is enabled.",
      "defaultValue": true
    },
    {
      "name": "async.framework.aws.region",
      "type": "java.lang.String",
      "description": "AWS region to use for all services.",
      "defaultValue": "ap-south-1"
    },
    {
      "name": "async.framework.aws.access-key",
      "type": "java.lang.String",
      "description": "AWS access key ID (optional if using IAM roles)."
    },
    {
      "name": "async.framework.aws.secret-key",
      "type": "java.lang.String",
      "description": "AWS secret access key (optional if using IAM roles)."
    },
    {
      "name": "async.framework.aws.role-arn",
      "type": "java.lang.String",
      "description": "AWS IAM role ARN to assume (optional)."
    },
    {
      "name": "async.framework.aws.use-default-credentials-provider",
      "type": "java.lang.Boolean",
      "description": "Whether to use the default AWS credentials provider chain.",
      "defaultValue": true
    },
    {
      "name": "async.framework.aws.dynamodb.table-name",
      "type": "java.lang.String",
      "description": "Primary table name for storing async requests.",
      "defaultValue": "async_requests"
    },
    {
      "name": "async.framework.aws.dynamodb.billing-mode",
      "type": "com.pravah.framework.async.config.DynamoDBConfig$BillingMode",
      "description": "Billing mode for the table (PAY_PER_REQUEST or PROVISIONED).",
      "defaultValue": "PAY_PER_REQUEST"
    },
    {
      "name": "async.framework.aws.dynamodb.create-table-if-not-exists",
      "type": "java.lang.Boolean",
      "description": "Whether to create the table automatically if it doesn't exist.",
      "defaultValue": false
    },
    {
      "name": "async.framework.aws.dynamodb.enable-ttl",
      "type": "java.lang.Boolean",
      "description": "Whether to enable TTL for automatic cleanup.",
      "defaultValue": true
    },
    {
      "name": "async.framework.aws.dynamodb.default-ttl",
      "type": "java.time.Duration",
      "description": "Default TTL duration for async requests.",
      "defaultValue": "P30D"
    },
    {
      "name": "async.framework.aws.sqs.visibility-timeout-seconds",
      "type": "java.lang.Integer",
      "description": "Default visibility timeout for messages in seconds.",
      "defaultValue": 300
    },
    {
      "name": "async.framework.aws.sqs.max-messages",
      "type": "java.lang.Integer",
      "description": "Maximum number of messages to receive in a single poll.",
      "defaultValue": 10
    },
    {
      "name": "async.framework.aws.sqs.wait-time-seconds",
      "type": "java.lang.Integer",
      "description": "Wait time for long polling in seconds.",
      "defaultValue": 20
    },
    {
      "name": "async.framework.aws.sqs.enable-long-polling",
      "type": "java.lang.Boolean",
      "description": "Whether to enable long polling.",
      "defaultValue": true
    },
    {
      "name": "async.framework.aws.sqs.max-concurrent-processors",
      "type": "java.lang.Integer",
      "description": "Maximum number of concurrent message processors.",
      "defaultValue": 10
    },
    {
      "name": "async.framework.aws.s3.bucket-name",
      "type": "java.lang.String",
      "description": "Primary S3 bucket name for storing payloads.",
      "defaultValue": "async-framework-payloads"
    },
    {
      "name": "async.framework.aws.s3.key-prefix",
      "type": "java.lang.String",
      "description": "Key prefix for all objects stored in S3.",
      "defaultValue": "async-requests/"
    },
    {
      "name": "async.framework.aws.s3.create-bucket-if-not-exists",
      "type": "java.lang.Boolean",
      "description": "Whether to create the bucket automatically if it doesn't exist.",
      "defaultValue": false
    },
    {
      "name": "async.framework.aws.s3.storage-class",
      "type": "com.pravah.framework.async.config.S3Config$StorageClass",
      "description": "S3 storage class for objects.",
      "defaultValue": "STANDARD"
    },
    {
      "name": "async.framework.aws.s3.encryption.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable server-side encryption.",
      "defaultValue": true
    },
    {
      "name": "async.framework.aws.s3.encryption.type",
      "type": "com.pravah.framework.async.config.S3Config$EncryptionConfig$EncryptionType",
      "description": "Server-side encryption type.",
      "defaultValue": "SSE_S3"
    },
    {
      "name": "async.framework.retry.max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum number of retry attempts.",
      "defaultValue": 3
    },
    {
      "name": "async.framework.retry.initial-delay",
      "type": "java.time.Duration",
      "description": "Initial retry delay.",
      "defaultValue": "PT30S"
    },
    {
      "name": "async.framework.retry.max-delay",
      "type": "java.time.Duration",
      "description": "Maximum retry delay.",
      "defaultValue": "PT10M"
    },
    {
      "name": "async.framework.retry.backoff-multiplier",
      "type": "java.lang.Double",
      "description": "Backoff multiplier for exponential backoff.",
      "defaultValue": 2.0
    },
    {
      "name": "async.framework.retry.enable-dead-letter-queue",
      "type": "java.lang.Boolean",
      "description": "Whether to enable dead letter queue support.",
      "defaultValue": true
    },
    {
      "name": "async.framework.monitoring.enable-metrics",
      "type": "java.lang.Boolean",
      "description": "Whether to enable metrics collection.",
      "defaultValue": true
    },
    {
      "name": "async.framework.monitoring.enable-tracing",
      "type": "java.lang.Boolean",
      "description": "Whether to enable distributed tracing.",
      "defaultValue": true
    },
    {
      "name": "async.framework.monitoring.enable-health-checks",
      "type": "java.lang.Boolean",
      "description": "Whether to enable health checks.",
      "defaultValue": true
    },
    {
      "name": "async.framework.monitoring.metrics-publish-interval",
      "type": "java.time.Duration",
      "description": "Metrics collection interval.",
      "defaultValue": "PT1M"
    },
    {
      "name": "async.framework.storage.enable-external-storage",
      "type": "java.lang.Boolean",
      "description": "Whether to enable external storage for large payloads.",
      "defaultValue": true
    },
    {
      "name": "async.framework.storage.inline-payload-threshold",
      "type": "java.lang.Integer",
      "description": "Threshold in bytes for storing payloads inline vs externally.",
      "defaultValue": 1024
    },
    {
      "name": "async.framework.storage.max-payload-size",
      "type": "java.lang.Integer",
      "description": "Maximum payload size in bytes.",
      "defaultValue": 10485760
    },
    {
      "name": "async.framework.processing.core-pool-size",
      "type": "java.lang.Integer",
      "description": "Core thread pool size for async processing.",
      "defaultValue": 4
    },
    {
      "name": "async.framework.processing.max-pool-size",
      "type": "java.lang.Integer",
      "description": "Maximum thread pool size for async processing.",
      "defaultValue": 20
    },
    {
      "name": "async.framework.processing.queue-capacity",
      "type": "java.lang.Integer",
      "description": "Queue capacity for thread pool.",
      "defaultValue": 100
    },
    {
      "name": "async.framework.listener.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether the SQS listener is enabled.",
      "defaultValue": true
    },
    {
      "name": "async.framework.listener.max-concurrent-consumers",
      "type": "java.lang.Integer",
      "description": "Maximum number of concurrent consumers per queue.",
      "defaultValue": 10
    },
    {
      "name": "async.framework.listener.max-messages-per-poll",
      "type": "java.lang.Integer",
      "description": "Maximum number of messages to receive in a single poll.",
      "defaultValue": 10
    }
  ],
  "hints": [
    {
      "name": "async.framework.aws.region",
      "values": [
        {
          "value": "us-east-1",
          "description": "US East (N. Virginia)"
        },
        {
          "value": "us-west-2",
          "description": "US West (Oregon)"
        },
        {
          "value": "eu-west-1",
          "description": "Europe (Ireland)"
        },
        {
          "value": "ap-south-1",
          "description": "Asia Pacific (Mumbai)"
        },
        {
          "value": "ap-southeast-1",
          "description": "Asia Pacific (Singapore)"
        }
      ]
    },
    {
      "name": "async.framework.aws.dynamodb.billing-mode",
      "values": [
        {
          "value": "PROVISIONED",
          "description": "Provisioned capacity mode with specified read/write capacity units"
        },
        {
          "value": "PAY_PER_REQUEST",
          "description": "On-demand billing mode that scales automatically"
        }
      ]
    },
    {
      "name": "async.framework.aws.s3.storage-class",
      "values": [
        {
          "value": "STANDARD",
          "description": "Standard storage class for frequently accessed data"
        },
        {
          "value": "STANDARD_IA",
          "description": "Standard-Infrequent Access for less frequently accessed data"
        },
        {
          "value": "INTELLIGENT_TIERING",
          "description": "Automatically moves data between access tiers"
        },
        {
          "value": "GLACIER",
          "description": "Archive storage for long-term backup"
        }
      ]
    },
    {
      "name": "async.framework.aws.s3.encryption.type",
      "values": [
        {
          "value": "SSE_S3",
          "description": "Server-side encryption with Amazon S3-managed keys"
        },
        {
          "value": "SSE_KMS",
          "description": "Server-side encryption with AWS KMS-managed keys"
        },
        {
          "value": "SSE_C",
          "description": "Server-side encryption with customer-provided keys"
        }
      ]
    }
  ]
}